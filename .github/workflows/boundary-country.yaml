name: Country Boundary

on:
  workflow_dispatch:
    inputs:
      country_codes:
        description: 'Comma-separated list of country codes to process (e.g. FR, DE, US)'
        required: true
        type: string
        default: 'FR'

jobs:
  prepare:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          clean: false

      - name: Set up matrix
        id: set-matrix
        run: |
          # Parse the input country codes and create matrix with metadata
          CODES='${{ inputs.country_codes }}'

          # Load country metadata
          MATRIX_JSON=$(python3 -c "
          import json
          import sys

          # Parse comma-separated codes and clean whitespace
          codes = [c.strip().lower() for c in '$CODES'.split(',') if c.strip()]

          # Load country data
          with open('.github/data/countries.json', 'r') as f:
              countries = json.load(f)

          # Build matrix
          matrix = []
          for code in codes:
              if code in countries:
                  country = countries[code]
                  # Generate fields from code and name
                  code_upper = code.upper()
                  tag_name = country['name'].lower().replace(' ', '-').replace('.', '').replace(',', '')
                  osm_query = f'a[\"ISO3166-1:alpha2\"=\"{code_upper}\"]'

                  matrix.append({
                      'code': code,
                      'name': country['name'],
                      'osm_query': osm_query,
                      'tag_name': tag_name,
                      'has_coastline': country.get('has_coastline', True)
                  })
              else:
                  print(f'Warning: Unknown country code: {code}', file=sys.stderr)

          print(json.dumps({'include': matrix}))
          ")

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX_JSON"

  extract:
    needs: prepare
    if: needs.prepare.outputs.matrix != '{"include":[]}'
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}

    uses: ./.github/workflows/reusable-boundaries.yaml
    with:
      cleanup_planet_files: false
      entity_code: ${{ matrix.code }}
      entity_name: ${{ matrix.name }}
      entity_type: country
      has_coastline: ${{ matrix.has_coastline }}
      osm_query: ${{ matrix.osm_query }}
      remote_path: /osm/boundaries/countries
      remote_version: 1
      tags: |
        boundary
        country
        ${{ matrix.tag_name }}
        geojson
        openstreetmap
        public
    secrets:
      RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}

  cleanup:
    needs: extract
    if: always()
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cleanup downloaded files
        uses: openplanetdata/actions/cleanup-downloads@main
