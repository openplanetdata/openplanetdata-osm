name: Planet Coastline

on:
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * *'  # Daily at 2pm UTC

jobs:
  planet-coastline:
    runs-on: self-hosted
    timeout-minutes: 120

    outputs:
      tag: ${{ steps.date.outputs.tag }}

    steps:
      - name: Show runner architecture
        run: echo "arch = ${{ runner.arch }}"

      - name: Set date tag
        id: date
        uses: openplanetdata/actions/set-date-tag@main

      - name: Install system dependencies
        shell: bash
        run: |
          need_install() { ! command -v "$1" &>/dev/null; }
          pkgs=()

          # Check for required tools
          need_install cmake && pkgs+=(cmake)
          need_install g++ && pkgs+=(gcc-c++)
          need_install ogr2ogr && pkgs+=(gdal)
          need_install git && pkgs+=(git)

          if [ ${#pkgs[@]} -gt 0 ]; then
            sudo dnf -y install "${pkgs[@]}"
          fi

          # Install runtime and development libraries needed for osmcoastline
          sudo dnf -y install libosmium-devel geos-devel gdal-devel sqlite-devel zlib-devel bzip2-devel boost-devel

      - name: Get osmcoastline version
        id: osmcoastline_version
        run: |
          # Get the latest commit hash from the repository
          COMMIT=$(git ls-remote https://github.com/osmcode/osmcoastline.git HEAD | cut -f1)
          echo "commit=$COMMIT" >> "$GITHUB_OUTPUT"

      - name: Cache osmcoastline binary
        uses: actions/cache@v4
        id: osmcoastline-cache
        with:
          key: ${{ runner.os }}-osmcoastline-${{ steps.osmcoastline_version.outputs.commit }}
          path: |
            ~/.local/bin/osmcoastline
            ~/.local/bin/osmcoastline_filter
            ~/.local/bin/osmcoastline_segments
            ~/.local/bin/osmcoastline_ways

      - name: Build osmcoastline
        if: steps.osmcoastline-cache.outputs.cache-hit != 'true'
        run: |
          echo "Building osmcoastline from source..."
          cd /tmp
          git clone https://github.com/osmcode/osmcoastline.git
          cd osmcoastline
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local ..
          make -j$(nproc)
          make install

      - name: Add osmcoastline to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          # Verify installation
          export PATH="$HOME/.local/bin:$PATH"
          osmcoastline --version

      - name: Download latest published PBF
        uses: openplanetdata/actions/download@main
        with:
          remote_path: osm/planet/pbf/planet-latest.osm.pbf

      - name: Rename downloaded PBF
        run: mv planet-latest.osm.pbf "planet-${{ steps.date.outputs.tag }}.osm.pbf"

      - name: Generate coastline GeoPackage
        run: |
          TAG="${{ steps.date.outputs.tag }}"
          PBF="planet-${TAG}.osm.pbf"
          GPKG="planet-coastline-${TAG}.osm.gpkg"

          echo "Starting coastline extraction at $(date -u +%Y-%m-%d_%H:%M:%S)"
          time osmcoastline "$PBF" -o "$GPKG" -g GPKG -p both -v -f -e
          echo "Coastline extraction finished at $(date -u +%Y-%m-%d_%H:%M:%S)"

      - name: Convert GeoPackage to GeoJSON
        run: |
          TAG="${{ steps.date.outputs.tag }}"
          GPKG="planet-coastline-${TAG}.osm.gpkg"
          GEOJSON="planet-coastline-${TAG}.osm.geojson"

          SQL="SELECT 'land' AS feature_class, a.* FROM land_polygons AS a UNION ALL SELECT 'water' AS feature_class, b.* FROM water_polygons AS b"

          echo "Starting GeoJSON export at $(date -u +%Y-%m-%d_%H:%M:%S)"
          time ogr2ogr -f GeoJSON "$GEOJSON" "$GPKG" -dialect SQLite -sql "$SQL" -nln planet_coastline -lco RFC7946=YES -lco COORDINATE_PRECISION=6
          echo "GeoJSON export finished at $(date -u +%Y-%m-%d_%H:%M:%S)"

      - name: Convert GeoPackage to GeoParquet
        run: |
          TAG="${{ steps.date.outputs.tag }}"
          GPKG="planet-coastline-${TAG}.osm.gpkg"
          PARQUET="planet-coastline-${TAG}.osm.parquet"

          SQL="SELECT 'land' AS feature_class, a.* FROM land_polygons AS a UNION ALL SELECT 'water' AS feature_class, b.* FROM water_polygons AS b"

          echo "Starting GeoParquet export at $(date -u +%Y-%m-%d_%H:%M:%S)"
          time ogr2ogr -f Parquet "$PARQUET" "$GPKG" -dialect SQLite -sql "$SQL" -nln planet_coastline -lco COMPRESSION=ZSTD
          echo "GeoParquet export finished at $(date -u +%Y-%m-%d_%H:%M:%S)"

      - name: Create GeoPackage metadata
        uses: openplanetdata/actions/create-metadata@main
        with:
          file: planet-coastline-${{ steps.date.outputs.tag }}.osm.gpkg
          remote_filename: planet-coastline-latest.osm.gpkg
          remote_path: /osm/planet/coastline
          remote_version: 1
          tags: |
            coastline
            geopackage
            openstreetmap
            private

      - name: Upload GeoPackage to R2
        uses: openplanetdata/actions/upload@main
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        with:
          file: planet-coastline-${{ steps.date.outputs.tag }}.osm.gpkg
          remote_filename: planet-coastline-latest.osm.gpkg
          remote_path: /osm/planet/coastline
          remote_version: 1

      - name: Create GeoJSON metadata
        uses: openplanetdata/actions/create-metadata@main
        with:
          file: planet-coastline-${{ steps.date.outputs.tag }}.osm.geojson
          remote_filename: planet-coastline-latest.osm.geojson
          remote_path: /osm/planet/coastline
          remote_version: 1
          tags: |
            coastline
            geojson
            openstreetmap
            private

      - name: Upload GeoJSON to R2
        uses: openplanetdata/actions/upload@main
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        with:
          file: planet-coastline-${{ steps.date.outputs.tag }}.osm.geojson
          remote_filename: planet-coastline-latest.osm.geojson
          remote_path: /osm/planet/coastline
          remote_version: 1

      - name: Create GeoParquet metadata
        uses: openplanetdata/actions/create-metadata@main
        with:
          file: planet-coastline-${{ steps.date.outputs.tag }}.osm.parquet
          remote_filename: planet-coastline-latest.osm.parquet
          remote_path: /osm/planet/coastline
          remote_version: 1
          tags: |
            coastline
            geoparquet
            openstreetmap
            private

      - name: Upload GeoParquet to R2
        uses: openplanetdata/actions/upload@main
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        with:
          file: planet-coastline-${{ steps.date.outputs.tag }}.osm.parquet
          remote_filename: planet-coastline-latest.osm.parquet
          remote_path: /osm/planet/coastline
          remote_version: 1

      - name: Cleanup downloaded files
        if: always()
        uses: openplanetdata/actions/cleanup-downloads@main

      - name: Cleanup generated files
        if: always()
        run: |
          rm -f planet-coastline-*.osm.gpkg planet-coastline-*.osm.gpkg.{sha256,metadata}
          rm -f planet-coastline-*.osm.geojson planet-coastline-*.osm.geojson.{sha256,metadata}
          rm -f planet-coastline-*.osm.parquet planet-coastline-*.osm.parquet.{sha256,metadata}
          find /tmp -name "tmp.*" -user "$USER" -delete 2>/dev/null || true
          # Clean up osmcoastline build directory if it exists
          rm -rf /tmp/osmcoastline
