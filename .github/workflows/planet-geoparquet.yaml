name: Planet GeoParquet

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Publish CRCP Snapshots", "Build & Publish GeoDesk v1 Snapshots"]
    types: [completed]
    branches: [main]

env:
  OHSOME_JAR_PATH: ohsome-planet/ohsome-planet-cli/target/ohsome-planet.jar

jobs:
  geoparquet:
    runs-on: openplanetdata-cortex
    timeout-minutes: 300

    outputs:
      tag: ${{ steps.date.outputs.tag }}

    steps:
      - name: Show runner architecture
        run: echo "arch = ${{ runner.arch }}"

      - name: Set date tag
        id: date
        uses: openplanetdata/actions/set-date-tag@main

      - name: Install system dependencies
        shell: bash
        run: |
          need_install() { ! command -v "$1" &>/dev/null; }
          pkgs=()
          need_install jq    && pkgs+=(jq)
          need_install unzip && pkgs+=(unzip)
          if [ ${#pkgs[@]} -gt 0 ]; then
            sudo dnf -y install "${pkgs[@]}"
          fi

      - uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 25

      - name: Get latest DuckDB release tag
        id: get_duckdb_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/duckdb/duckdb/releases/latest | jq -r .tag_name)
          echo "tag=$TAG" >>"$GITHUB_OUTPUT"

      - name: Install latest DuckDB cli
        run: |
          case "${{ runner.arch }}" in
            X64)   system_config="linux-amd64" ;;
            ARM64) system_config="linux-arm64" ;;
            *) echo "Unsupported architecture: ${{ runner.arch }}"; exit 1 ;;
          esac
          wget https://github.com/duckdb/duckdb/releases/download/${{ steps.get_duckdb_tag.outputs.tag }}/duckdb_cli-$system_config.zip
          unzip -o duckdb_cli-$system_config.zip
          chmod a+x ./duckdb

      - name: Get latest ohsome-planet release tag
        id: get_ohsome_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/GIScience/ohsome-planet/releases/latest | jq -r .tag_name)
          echo "tag=$TAG" >>"$GITHUB_OUTPUT"

      - name: Checkout ohsome-planet
        uses: actions/checkout@v5
        with:
          repository: GIScience/ohsome-planet
          ref: ${{ steps.get_ohsome_tag.outputs.tag }}
          path: ohsome-planet
          submodules: recursive
      
      - name: Cache ohsome-planet JAR
        uses: actions/cache@v4
        id: jar-cache
        with:
          key: ${{ runner.os }}-ohsome-planet-${{ steps.get_ohsome_tag.outputs.tag }}
          path: ${{ env.OHSOME_JAR_PATH }}

      - name: Build ohsome-planet JAR
        if: steps.jar-cache.outputs.cache-hit != 'true'
        run: |
          cd ohsome-planet
          ./mvnw -q clean package -DskipTests
          find . -name "*.jar" -type f

      - name: Download latest published PBF
        uses: openplanetdata/actions/download@main
        with:
          remote_path: osm/planet/pbf/planet-latest.osm.pbf

      - name: Rename downloaded PBF
        run: mv planet-latest.osm.pbf "planet-${{ steps.date.outputs.tag }}.osm.pbf"

      - name: Build GeoParquet with ohsome-planet from PBF
        env:
          TAG: ${{ steps.date.outputs.tag }}
        run: |
          PBF="planet-${TAG}.osm.pbf"
          OUT_DIR="ohsome-${TAG}"

          # Check available disk space before starting
          echo "::group::Disk space check"
          df -h .
          echo "::endgroup::"

          # Ensure clean output directory
          rm -rf "$OUT_DIR"

          time java -Xms52g -Xmx52g -jar "${{ env.OHSOME_JAR_PATH }}" contributions \
               --pbf "$PBF" --output "$OUT_DIR"

          # Check if ohsome-planet completed successfully
          if [ $? -ne 0 ]; then
            echo "::error::ohsome-planet failed to complete"
            exit 1
          fi

          # list everything just produced
          echo "::group::Produced files"
          find "$OUT_DIR" -print | sort
          echo "::endgroup::"

          # Validate parquet files before processing with DuckDB
          echo "::group::Validating parquet files"
          VALIDATION_FAILED=0
          for parquet_file in "$OUT_DIR"/contributions/latest/*.parquet; do
            if [ -f "$parquet_file" ]; then
              echo "Validating: $parquet_file"
              if ! ./duckdb -c "SELECT COUNT(*) FROM '$parquet_file'" > /dev/null 2>&1; then
                echo "::error::Corrupted parquet file detected: $parquet_file"
                VALIDATION_FAILED=1
              fi
            fi
          done

          if [ $VALIDATION_FAILED -eq 1 ]; then
            echo "::error::One or more parquet files failed validation"
            exit 1
          fi
          echo "All parquet files validated successfully"
          echo "::endgroup::"

          # Use workspace directory for temp files (not /tmp which may be tmpfs/RAM)
          DUCKDB_TEMP_DIR="${PWD}/.duckdb-temp"
          mkdir -p "$DUCKDB_TEMP_DIR"

          ./duckdb -c "
              INSTALL 'spatial'; LOAD 'spatial';
              SET max_temp_directory_size='500GB';
              SET memory_limit='54GB';
              SET temp_directory='${DUCKDB_TEMP_DIR}';

              COPY (
                  SELECT
                    osm_type::ENUM ('node', 'way', 'relation') AS osm_type,
                    osm_id,
                    tags,
                    bbox,
                    ST_GeomFromWKB(geometry) as geometry
                  FROM '${OUT_DIR}/contributions/latest/*.parquet'
              ) TO 'planet-${TAG}.osm.parquet' (
                  FORMAT PARQUET,
                  CODEC 'zstd',
                  COMPRESSION_LEVEL 3,
                  PARQUET_VERSION v2
              );
          "

          # Cleanup temp directory
          rm -rf "$DUCKDB_TEMP_DIR"

      - name: Create metadata
        id: create_meta
        uses: openplanetdata/actions/create-metadata@main
        with:
          file: planet-${{ steps.date.outputs.tag }}.osm.parquet
          remote_filename: planet-latest.osm.parquet
          remote_path: /osm/planet/geoparquet
          remote_version: 1
          tags: |
            geoparquet
            openstreetmap
            public

      - name: Upload to R2
        uses: openplanetdata/actions/upload@main
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        with:
          file: planet-${{ steps.date.outputs.tag }}.osm.parquet
          remote_filename: planet-latest.osm.parquet
          remote_path: /osm/planet/geoparquet
          remote_version: 1

      - name: Cleanup downloaded and generated files
        if: always()
        run: |
          rm -f duckdb duckdb_cli-*.zip
          rm -f planet-*.osm.pbf planet-*.osm.parquet planet-*.osm.parquet.{sha256,metadata}
          rm -rf ohsome-*
          rm -rf ohsome-planet
          rm -rf .duckdb-temp
          find . -name "*.jar" -delete
          find /tmp -name "tmp.*" -user "$USER" -delete 2>/dev/null || true
